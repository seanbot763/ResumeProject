name: Build and deploy Python project to Azure Function App - counterfunctionapi

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './azure-function' # Path to your Azure Function project
  PYTHON_VERSION: '3.10' # Python version to use
  AZURE_RESOURCE_GROUP: 'CloudChallenge' # Your Azure resource group name
  AZURE_FUNCTIONAPP_NAME: 'counterfunctionapi' # Your Azure Function App name
  AZURE_REGION: 'West US' # Your desired Azure region

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for tags and branches

      - name: Log - Checking out repository
        run: echo "Checked out repository. Listing files..."

      - name: List files in repository
        run: ls -la

      - name: Setup Python version
        uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Log - Python version setup
        run: python --version

      - name: Create and start virtual environment
        run: |
          echo "Creating virtual environment..."
          python -m venv venv
          echo "Activating virtual environment..."
          source venv/bin/activate
          echo "Virtual environment created and activated. Listing environment..."
          ls -la venv

      - name: Log - Virtual environment created
        run: echo "Virtual environment is ready."

      - name: Install dependencies
        run: |
          echo "Installing dependencies from requirements.txt..."
          pip install -r ./azure-function/requirements.txt
          echo "Dependencies installed. Listing installed packages..."
          pip list

      - name: Log - Dependencies installation complete
        run: echo "Dependencies are installed."

      - name: Validate files before zipping
        run: |
          echo "Validating files in the azure-function directory before zipping..."
          if [ -d "./azure-function" ]; then
            echo "Directory './azure-function' exists. Listing contents..."
            ls -la ./azure-function
          else
            echo "Error: Directory './azure-function' does not exist."
            exit 1
          fi

      - name: Zip artifact for deployment
        run: |
          echo "Creating zip package for deployment..."
          zip -r release.zip ./azure-function
          echo "Zip package created. Listing contents..."
          unzip -l release.zip

      - name: Log - Artifact zipped
        run: echo "Artifact zipped and ready for upload."

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: python-app
          path: |
            release.zip
            !venv/
      
      - name: Log - Artifact uploaded
        run: echo "Artifact uploaded for deployment job."

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: python-app
      
      - name: Log - Artifact downloaded
        run: echo "Artifact downloaded from build job. Listing files..."

      - name: List downloaded files
        run: ls -la

      - name: Validate downloaded artifact
        run: |
          echo "Validating the downloaded artifact..."
          if [ -f "release.zip" ]; then
            echo "Artifact 'release.zip' exists. Listing contents..."
            unzip -l release.zip
          else
            echo "Error: Artifact 'release.zip' does not exist."
            exit 1
          fi

      - name: Login to Azure using Service Principal
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log - Logged into Azure
        run: echo "Logged into Azure with Service Principal."

      - name: Deploy to Azure Functions
        run: |
          echo "Deploying to Azure Functions..."
          az functionapp deployment source config-zip \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --src release.zip

      - name: Log - Deployment status
        run: echo "Deployment to Azure Functions completed."

      - name: List and validate functions
        run: |
          echo "Listing and validating functions in the Azure Function App..."
          FUNCTIONS=$(az functionapp function list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_FUNCTIONAPP_NAME }} --query "[].{Name:name, InvokeUrlTemplate:invokeUrlTemplate}" --output json)
          echo "Functions in the app:"
          echo $FUNCTIONS | jq
          if [ -z "$FUNCTIONS" ]; then
            echo "Error: No functions found in the Function App."
            exit 1
          fi
          for FUNCTION in $(echo $FUNCTIONS | jq -r '.[].Name'); do
            echo "Checking status of function: $FUNCTION"
            FUNCTION_URL=$(echo $FUNCTIONS | jq -r ".[] | select(.Name==\"$FUNCTION\") | .InvokeUrlTemplate")
            echo "Function URL: $FUNCTION_URL"
            if [ -z "$FUNCTION_URL" ]; then
              echo "Error: Function URL is empty for $FUNCTION."
              exit 1
            fi
            STATUS_CODE=$(curl -o /dev/null -s -w "%{http_code}" $FUNCTION_URL)
            echo "HTTP status code from function $FUNCTION: $STATUS_CODE"
            if [ "$STATUS_CODE" -ne 200 ]; then
              echo "Error: Function $FUNCTION did not respond with status code 200."
              exit 1
            fi
          done

      - name: Log - Function validation complete
        run: echo "Function validation complete. All functions are responding correctly."
